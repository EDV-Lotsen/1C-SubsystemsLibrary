


Procedure BeforeWrite(Cancellation)
	If NOT DataExchange.Load Then
		
		IBCheck = DeletionMarkInIB();
		If DeletionMark And Not IBCheck Then
			
			// Check right "Mark for deletion".
			If NOT FileOperationsOverrided.DeletionMarkSettingPermitted(Ref) Then
				Raise StringFunctionsClientServer.SubstitureParametersInString(
				                     NStr("en = 'You do not have the right ""Mark for deletion"" of the folder ""%1"".'"),
				                     String(Ref));
			EndIf;
		EndIf;
		
		If DeletionMark <> IBCheck And Not Ref.IsEmpty() Then
			// Select files and try to mark them for deletion
			Query = New Query;
			Query.Text = 
				"SELECT
				|	Files.Ref,
				|	Files.LockedBy
				|FROM
				|	Catalog.Files AS Files
				|WHERE
				|	Files.FileOwner = &Ref";
			
			Query.SetParameter("Ref", Ref);
			
			Result = Query.Execute();
			Selection = Result.Choose();
			While Selection.Next() Do
				If Not Selection.LockedBy.IsEmpty() Then
					Raise StringFunctionsClientServer.SubstitureParametersInString(
					                     NStr("en = '%1 folder cannot be deleted as it contains ""%2""  file that is being edited.'"),
					                     String(Ref),
					                     String(Selection.Ref));
				EndIf;

				FileObject = Selection.Ref.GetObject();
				FileObject.Lock();
				FileObject.SetDeletionMark(DeletionMark);
			EndDo;
		EndIf;
		
		AdditionalProperties.Insert("PastIsNew", IsNew());
		
		If NOT IsNew() Then
			
			If Description <> Ref.Description Then // folder was renamed
				WorkingDirectoryOfThisFolders = FileOperations.GetWorkingDirectory(Ref);
				WorkingDirectory = FileOperations.GetWorkingDirectory(Ref.Parent);
				If WorkingDirectory <> "" Then
					
					// Add closing slash, if it is missing
					If Right(WorkingDirectory,1) <> "\" Then
						WorkingDirectory = WorkingDirectory + "\";
					EndIf;
					
					WorkingDirectoryInheritedOld = WorkingDirectory + Ref.Description + "\";
					If WorkingDirectoryInheritedOld = WorkingDirectoryOfThisFolders Then
						WorkingDirectory = WorkingDirectory + Description + "\";
						FileOperations.SaveWorkingDirectory(Ref, WorkingDirectory);
					EndIf;
				EndIf;
			EndIf;
			
			If Parent <> Ref.Parent Then // moved folder to a different folder
				WorkingDirectoryOfThisFolders = FileOperations.GetWorkingDirectory(Ref);
				WorkingDirectory = FileOperations.GetWorkingDirectory(Ref.Parent);
				WorkingDirectoryNew = FileOperations.GetWorkingDirectory(Parent);
				If WorkingDirectory <> "" OR WorkingDirectoryNew <> "" Then
					
					WorkingDirectoryInheritedOld = WorkingDirectory;
					
					If WorkingDirectory <> "" Then
						WorkingDirectoryInheritedOld = WorkingDirectoryInheritedOld + Ref.Description + "\";
					EndIf;
					
					If WorkingDirectoryInheritedOld = WorkingDirectoryOfThisFolders Then // working directory is autogenerated from the parent
						
						If WorkingDirectoryNew <> "" Then
							WorkingDirectoryNew = WorkingDirectoryNew + Description + "\";
							FileOperations.SaveWorkingDirectory(Ref, WorkingDirectoryNew);
						Else
							FileOperations.ClearWorkingDirectory(Ref);
						EndIf;
					EndIf;
				EndIf;
			EndIf;
			
		EndIf;
		
	EndIf;
EndProcedure

Procedure OnWrite(Cancellation)
	If NOT DataExchange.Load Then
		
		If AdditionalProperties.PastIsNew Then
			OwnerWorkingDirectory = FileOperations.GetWorkingDirectory(Parent);
			If OwnerWorkingDirectory <> "" Then
				
				// Add closing slash, if it is missing
				If Right(OwnerWorkingDirectory,1) <> "\" Then
					OwnerWorkingDirectory = OwnerWorkingDirectory + "\";
				EndIf;
				
				OwnerWorkingDirectory = OwnerWorkingDirectory + Description + "\";
				FileOperations.SaveWorkingDirectory(Ref, OwnerWorkingDirectory);
			EndIf;
		EndIf;		
		
	EndIf;
EndProcedure

Procedure Filling(FillingData, StandardProcessing)
	CreationDate = CurrentDate();
	Responsible = CommonUse.CurrentUser();
EndProcedure

// Returns current deletion mark value in the infobase
Function DeletionMarkInIB()
	Query = New Query;
	Query.Text = 
		"SELECT
		|	FileFolders.DeletionMark
		|FROM
		|	Catalog.FileFolders AS FileFolders
		|WHERE
		|	FileFolders.Ref = &Ref";

	Query.SetParameter("Ref", Ref);

	Result = Query.Execute();

	If Not Result.IsEmpty() Then
		Selection = Result.Choose();
		Selection.Next();
		Return Selection.DeletionMark;
	EndIf;	
	
	Return Undefined;
EndFunction

Procedure FillCheckProcessing(Cancellation, CheckedAttributes)
	If NOT FileOperationsClientServer.FolderOrFileNameConsistsOfValidCharsForFileSystem(Description) Then
		Cancellation = True;
		
		Text = NStr("en = 'Folder description contains not allowed symbols ( \ / : * ? "" < > | .. )'");
		CommonUseClientServer.MessageToUser(Text, ThisObject, "Description");
	EndIf;
EndProcedure
